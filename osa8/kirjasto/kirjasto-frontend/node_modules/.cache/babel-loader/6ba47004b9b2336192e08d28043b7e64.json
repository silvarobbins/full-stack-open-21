{"ast":null,"code":"var _jsxFileName = \"/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa8/kirjasto/kirjasto-frontend/src/components/Books.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_BOOKS = gql`\nquery{\n  allBooks{\n    title\n    published\n    author{\n      name\n    }\n    genres\n  }\n}\n`;\n\nconst Books = props => {\n  _s();\n\n  const [filter, setFilter] = useState(null);\n  const result = useQuery(ALL_BOOKS, {\n    pollInterval: 2000\n  });\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (result.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  const books = result.data.allBooks;\n\n  const onlyUnique = (value, index, self) => {\n    return self.indexOf(value) === index;\n  };\n\n  const genres = books.flatMap(b => b.genres).filter(onlyUnique);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), books.map(b => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: b.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: b.author.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: b.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, b.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: genres.map(g => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFilter(g),\n        children: g\n      }, g, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Books, \"LTOBZgRjqMAaj80LsggQY8xLwYM=\", false, function () {\n  return [useQuery];\n});\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa8/kirjasto/kirjasto-frontend/src/components/Books.js"],"names":["React","useState","gql","useQuery","ALL_BOOKS","Books","props","filter","setFilter","result","pollInterval","show","loading","books","data","allBooks","onlyUnique","value","index","self","indexOf","genres","flatMap","b","map","title","author","name","published","g"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;AAEA,MAAMC,SAAS,GAAGF,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaA,MAAMG,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMQ,MAAM,GAAGN,QAAQ,CAACC,SAAD,EAAY;AACjCM,IAAAA,YAAY,EAAE;AADmB,GAAZ,CAAvB;;AAIA,MAAI,CAACJ,KAAK,CAACK,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,MAAIF,MAAM,CAACG,OAAX,EAAoB;AAClB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,QAAMC,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAYC,QAA1B;;AAEA,QAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,KAAwB;AACzC,WAAOA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAA/B;AACD,GAFD;;AAGA,QAAMG,MAAM,GAAGR,KAAK,CAACS,OAAN,CAAeC,CAAD,IAAOA,CAAC,CAACF,MAAvB,EAA+Bd,MAA/B,CAAsCS,UAAtC,CAAf;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGH,KAAK,CAACW,GAAN,CAAWD,CAAD,iBACT;AAAA,kCACE;AAAA,sBAAKA,CAAC,CAACE;AAAP;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKF,CAAC,CAACG,MAAF,CAASC;AAAd;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAKJ,CAAC,CAACK;AAAP;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAASL,CAAC,CAACE,KAAX;AAAA;AAAA;AAAA;AAAA,gBADD,CANH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF,eAmBE;AAAA,gBACGJ,MAAM,CAACG,GAAP,CAAYK,CAAD,iBACV;AAAgB,QAAA,OAAO,EAAE,MAAMrB,SAAS,CAACqB,CAAD,CAAxC;AAAA,kBAA8CA;AAA9C,SAAaA,CAAb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CArDD;;GAAMxB,K;UAGWF,Q;;;KAHXE,K;AAuDN,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react'\nimport { gql, useQuery } from '@apollo/client'\n\nconst ALL_BOOKS = gql`\nquery{\n  allBooks{\n    title\n    published\n    author{\n      name\n    }\n    genres\n  }\n}\n`\n\nconst Books = (props) => {\n  const [filter, setFilter] = useState(null)\n\n  const result = useQuery(ALL_BOOKS, {\n    pollInterval: 2000\n  })\n\n  if (!props.show) {\n    return null\n  }\n\n  if (result.loading) {\n    return(\n      <div>\n        loading...\n      </div>\n    )\n  }\n\n  const books = result.data.allBooks\n\n  const onlyUnique = (value, index, self) => {\n    return self.indexOf(value) === index;\n  }\n  const genres = books.flatMap((b) => b.genres).filter(onlyUnique)\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>author</th>\n            <th>published</th>\n          </tr>\n          {books.map((b) => (\n            <tr key={b.title}>\n              <td>{b.title}</td>\n              <td>{b.author.name}</td>\n              <td>{b.published}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div>\n        {genres.map((g) => \n          <button key={g} onClick={() => setFilter(g)}>{g}</button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Books\n"]},"metadata":{},"sourceType":"module"}