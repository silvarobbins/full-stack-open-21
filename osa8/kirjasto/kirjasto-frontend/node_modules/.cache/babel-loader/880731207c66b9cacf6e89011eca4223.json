{"ast":null,"code":"var _jsxFileName = \"/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa8/kirjasto/kirjasto-frontend/src/components/Books.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_BOOKS = gql`\n  query allBooks($genre: String){\n    allBooks(genre: $genre){\n      title\n      published\n      author{\n        name\n      }\n      genres\n    }\n  }\n`;\n\nconst Books = props => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BOOKS);\n  const [filter, setFilter] = useState(null);\n  const [books, setBooks] = useState([]);\n  const getBooks = useQuery(GET_BOOKS);\n  const allBooks = getBooks();\n  console.log('allBooks: ', allBooks);\n  useEffect(() => {\n    setBooks(getBooks({\n      variables: {\n        genre: filter\n      }\n    }));\n  }, [filter]);\n\n  const onlyUnique = (value, index, self) => {\n    return self.indexOf(value) === index;\n  };\n\n  const genres = allBooks.flatMap(b => b.genres).filter(onlyUnique);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), filter ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"in genre \", filter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"showing all\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 47\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), books.map(b => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: b.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: b.author.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: b.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, b.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [genres.map(g => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFilter(g),\n        children: g\n      }, g, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFilter(null),\n        children: \"all genres\"\n      }, 'empty', false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Books, \"qomOb5/fs6rpfNZy9vuTE89c05c=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa8/kirjasto/kirjasto-frontend/src/components/Books.js"],"names":["React","useEffect","useState","gql","useQuery","GET_BOOKS","Books","props","loading","error","data","filter","setFilter","books","setBooks","getBooks","allBooks","console","log","variables","genre","onlyUnique","value","index","self","indexOf","genres","flatMap","b","show","map","title","author","name","published","g"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { gql, useQuery } from '@apollo/client'\n\nconst GET_BOOKS = gql`\n  query allBooks($genre: String){\n    allBooks(genre: $genre){\n      title\n      published\n      author{\n        name\n      }\n      genres\n    }\n  }\n`\nconst Books = (props) => {\n  const { loading, error, data } = useQuery(GET_BOOKS);\n  const [filter, setFilter] = useState(null)\n  const [books, setBooks] = useState([])\n  const getBooks = useQuery(GET_BOOKS)\n\n  const allBooks = getBooks()\n  console.log('allBooks: ', allBooks)\n  \n  useEffect(() => {\n    setBooks(getBooks({variables: {genre: filter}}))\n  }, [filter])\n  \n  const onlyUnique = (value, index, self) => {\n    return self.indexOf(value) === index;\n  }\n  const genres = allBooks.flatMap((b) => b.genres).filter(onlyUnique)\n\n  if (!props.show) {\n      return null\n    }\n\n  if (loading) {\n    return(\n      <div>\n        loading...\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h2>books</h2>\n      {filter ? <div>in genre {filter}</div>: <div>showing all</div>}\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>author</th>\n            <th>published</th>\n          </tr>\n          {books.map((b) => (\n            <tr key={b.title}>\n              <td>{b.title}</td>\n              <td>{b.author.name}</td>\n              <td>{b.published}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div>\n        {genres.map((g) => \n          <button key={g} onClick={() => setFilter(g)}>{g}</button>\n        )}\n        <button key={'empty'} onClick={() => setFilter(null)}>all genres</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Books\n"]},"metadata":{},"sourceType":"module"}