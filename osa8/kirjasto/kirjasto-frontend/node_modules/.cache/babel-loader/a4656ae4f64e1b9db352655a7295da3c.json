{"ast":null,"code":"var _jsxFileName = \"/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa8/kirjasto/kirjasto-frontend/src/components/Books.js\",\n    _s = $RefreshSig$();\n\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_BOOKS = gql`\nquery{\n  allBooks{\n    title\n    published\n    author\n  }\n}\n`;\n\nconst Books = props => {\n  _s();\n\n  const result = useQuery(ALL_BOOKS);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (result.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n  const books = result.data.allBooks;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"published\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), books.map(a => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: a.published\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)]\n        }, a.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Books, \"JqpwbFFyOF6wIHaj5E6obYHTpSg=\", false, function () {\n  return [useQuery];\n});\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa8/kirjasto/kirjasto-frontend/src/components/Books.js"],"names":["gql","useQuery","ALL_BOOKS","Books","props","result","show","loading","books","data","allBooks","map","a","title","author","published"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;AAEA,MAAMC,SAAS,GAAGF,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,MAAMG,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAMC,MAAM,GAAGJ,QAAQ,CAACC,SAAD,CAAvB;;AAEA,MAAI,CAACE,KAAK,CAACE,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,MAAID,MAAM,CAACE,OAAX,EAAoB;AAClB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,QAAMC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAYC,QAA1B;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGF,KAAK,CAACG,GAAN,CAAWC,CAAD,iBACT;AAAA,kCACE;AAAA,sBAAKA,CAAC,CAACC;AAAP;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD,CAAC,CAACE;AAAP;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAKF,CAAC,CAACG;AAAP;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAASH,CAAC,CAACC,KAAX;AAAA;AAAA;AAAA;AAAA,gBADD,CANH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvCD;;GAAMV,K;UACWF,Q;;;KADXE,K;AAyCN,eAAeA,KAAf","sourcesContent":["import { gql, useQuery } from '@apollo/client'\n\nconst ALL_BOOKS = gql`\nquery{\n  allBooks{\n    title\n    published\n    author\n  }\n}\n`\n\nconst Books = (props) => {\n  const result = useQuery(ALL_BOOKS)\n\n  if (!props.show) {\n    return null\n  }\n\n  if (result.loading) {\n    return(\n      <div>\n        loading...\n      </div>\n    )\n  }\n\n  const books = result.data.allBooks\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>author</th>\n            <th>published</th>\n          </tr>\n          {books.map((a) => (\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author}</td>\n              <td>{a.published}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Books\n"]},"metadata":{},"sourceType":"module"}