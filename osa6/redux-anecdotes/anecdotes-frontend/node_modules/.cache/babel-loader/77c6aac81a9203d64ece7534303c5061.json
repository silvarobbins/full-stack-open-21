{"ast":null,"code":"const initialState = null;\nlet notificationTimerID;\nexport const setNotification = (notification, time) => {\n  clearTimeout(notificationTimerID);\n  return async dispatch => {\n    notificationTimerID = setTimeout(() => {\n      hideNotification();\n    }, time * 1000);\n    dispatch({\n      type: 'SHOW_NOTIFICATION',\n      notification\n    });\n  };\n};\nexport const clearNotification = () => {};\nexport const hideNotification = () => {\n  return {\n    type: 'HIDE_NOTIFICATION'\n  };\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SHOW_NOTIFICATION':\n      return action.notification;\n\n    case 'HIDE_NOTIFICATION':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default notificationReducer;","map":{"version":3,"sources":["/Users/silva/Documents/Aalto/Ohjelmointi/Full Stack Open/osa6/redux-anecdotes/anecdotes-frontend/src/reducers/notificationReducer.js"],"names":["initialState","notificationTimerID","setNotification","notification","time","clearTimeout","dispatch","setTimeout","hideNotification","type","clearNotification","notificationReducer","state","action"],"mappings":"AAAA,MAAMA,YAAY,GAAG,IAArB;AACA,IAAIC,mBAAJ;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,YAAD,EAAeC,IAAf,KAAwB;AACrDC,EAAAA,YAAY,CAACJ,mBAAD,CAAZ;AACA,SAAO,MAAMK,QAAN,IAAkB;AACvBL,IAAAA,mBAAmB,GAAGM,UAAU,CAAC,MAAM;AAAGC,MAAAA,gBAAgB,EAAjB;AAAsB,KAA/B,EAAiCJ,IAAI,GAAC,IAAtC,CAAhC;AACAE,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,mBADC;AAEPN,MAAAA;AAFO,KAAD,CAAR;AAID,GAND;AAOD,CATM;AAWP,OAAO,MAAMO,iBAAiB,GAAG,MAAM,CACtC,CADM;AAGP,OAAO,MAAMF,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;;AAMP,MAAME,mBAAmB,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC5D,UAAOA,MAAM,CAACJ,IAAd;AACE,SAAK,mBAAL;AACE,aAAOI,MAAM,CAACV,YAAd;;AACF,SAAK,mBAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAOS,KAAP;AANJ;AAQD,CATD;;AAWA,eAAeD,mBAAf","sourcesContent":["const initialState = null\nlet notificationTimerID;\n\nexport const setNotification = (notification, time) => {\n  clearTimeout(notificationTimerID);\n  return async dispatch => {\n    notificationTimerID = setTimeout(() => { (hideNotification()) }, time*1000)\n    dispatch({\n      type: 'SHOW_NOTIFICATION',\n      notification\n    })\n  }\n}\n\nexport const clearNotification = () => {\n}\n\nexport const hideNotification = () => {\n  return {\n    type: 'HIDE_NOTIFICATION'\n  }\n}\n\nconst notificationReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'SHOW_NOTIFICATION':\n      return action.notification\n    case 'HIDE_NOTIFICATION':\n      return null\n    default:\n      return state\n  }\n}\n\nexport default notificationReducer"]},"metadata":{},"sourceType":"module"}